{"version":3,"file":"parts.js","sources":["src/parts.ts"],"sourcesContent":["import {NodePart, nothing} from './lit-html.js';\n\n/**\n * The state of a NodePart, which can be detached and reattached.\n */\nexport type NodePartState = {};\n\n/**\n * The private interface for NodePartState, which should be kept opaque.\n */\ntype NodePartStateInternal = {\n  __value: unknown;\n  __fragment: DocumentFragment;\n};\n\nexport const detachNodePart = (part: NodePart): NodePartState => {\n  const fragment = document.createDocumentFragment();\n  const state: NodePartStateInternal = {\n    __value: part._value,\n    __fragment: fragment,\n  };\n  let start = part._startNode.nextSibling;\n  let nextNode;\n  while (start !== part._endNode) {\n    nextNode = start!.nextSibling;\n    fragment.append(start!);\n    start = nextNode;\n  }\n  part._value = nothing;\n  return state;\n};\n\nexport const restoreNodePart = (part: NodePart, state: NodePartState) => {\n  // TODO (justinfagnani): make an interal-only interface\n  (part as any)._commitNode((state as NodePartStateInternal).__fragment);\n  part._value = (state as NodePartStateInternal).__value;\n};\n\nconst createMarker = () => document.createComment('');\n\nexport const createAndInsertPart = (\n  containerPart: NodePart,\n  refPart?: NodePart\n): NodePart => {\n  const container = containerPart._startNode.parentNode as Node;\n\n  const endNode =\n    refPart === undefined ? containerPart._endNode : refPart._startNode;\n\n  const startNode = container.insertBefore(createMarker(), endNode);\n\n  container.insertBefore(createMarker(), endNode);\n  const newPart = new NodePart(startNode, endNode, containerPart.options);\n  return newPart;\n};\n\nexport const setPartValue = (part: NodePart, value: unknown) => {\n  part._setValue(value);\n  return part;\n};\n\nexport const getPartValue = (part: NodePart) => part._value;\n\nexport const insertPartBefore = (\n  containerPart: NodePart,\n  part: NodePart,\n  refPart?: NodePart\n) => {\n  const container = containerPart._startNode.parentNode!;\n\n  const refNode = refPart ? refPart._startNode : containerPart._endNode;\n\n  const endNode = part._endNode!.nextSibling;\n\n  if (endNode !== refNode) {\n    // assertNodeMakers(part);\n    reparentNodes(container, part._startNode, endNode, refNode);\n  }\n};\n\nexport const removePart = (part: NodePart) => {\n  removeNodes(\n    part._startNode,\n    part._endNode!.nextSibling\n  );\n};\n\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (\n  container: Node,\n  start: Node | null,\n  end: Node | null = null,\n  before: Node | null = null\n): void => {\n  while (start !== end) {\n    const n = start!.nextSibling;\n    container.insertBefore(start!, before);\n    start = n;\n  }\n};\n\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (\n  start: ChildNode | null,\n  end: ChildNode | null = null\n): void => {\n  while (start !== end) {\n    const n = start!.nextSibling;\n    start!.remove();\n    start = n;\n  }\n};\n"],"names":["detachNodePart","part","fragment","document","createDocumentFragment","state","_$__value$_","_value","_$__fragment$_","nextNode","start","_startNode","nextSibling","_endNode","append","nothing","restoreNodePart","_commitNode","__fragment","__value","createMarker","createComment","createAndInsertPart","containerPart","refPart","container","parentNode","endNode","undefined","startNode","insertBefore","NodePart","options","setPartValue","value","_setValue","getPartValue","insertPartBefore","refNode","reparentNodes","removePart","removeNodes","end","before","n","remove"],"mappings":"4DAeaA,EAAkBC,IAC7B,MAAMC,EAAWC,SAASC,yBACpBC,EAA+B,CACnCC,YAASL,EAAKM,OACdC,eAAYN,GAEd,IACIO,EADAC,EAAQT,EAAKU,WAAWC,YAE5B,KAAOF,IAAUT,EAAKY,UACpBJ,EAAWC,EAAOE,YAClBV,EAASY,OAAOJ,GAChBA,EAAQD,EAGV,OADAR,EAAKM,OAASQ,EACPV,GAGIW,EAAkB,CAACf,EAAgBI,KAE7CJ,EAAagB,YAAaZ,EAAgCa,gBAC3DjB,EAAKM,OAAUF,EAAgCc,aAG3CC,EAAe,IAAMjB,SAASkB,cAAc,IAErCC,EAAsB,CACjCC,EACAC,KAEA,MAAMC,EAAYF,EAAcZ,WAAWe,WAErCC,OACQC,IAAZJ,EAAwBD,EAAcV,SAAWW,EAAQb,WAErDkB,EAAYJ,EAAUK,aAAaV,IAAgBO,GAIzD,OAFAF,EAAUK,aAAaV,IAAgBO,GACvB,IAAII,EAASF,EAAWF,EAASJ,EAAcS,UAIpDC,EAAe,CAAChC,EAAgBiC,KAC3CjC,EAAKkC,UAAUD,GACRjC,GAGImC,EAAgBnC,GAAmBA,EAAKM,OAExC8B,EAAmB,CAC9Bd,EACAtB,EACAuB,KAEA,MAAMC,EAAYF,EAAcZ,WAAWe,WAErCY,EAAUd,EAAUA,EAAQb,WAAaY,EAAcV,SAEvDc,EAAU1B,EAAKY,SAAUD,YAE3Be,IAAYW,GAEdC,EAAcd,EAAWxB,EAAKU,WAAYgB,EAASW,IAI1CE,EAAcvC,IACzBwC,EACExC,EAAKU,WACLV,EAAKY,SAAUD,cASN2B,EAAgB,CAC3Bd,EACAf,EACAgC,EAAmB,KACnBC,EAAsB,QAEtB,KAAOjC,IAAUgC,GAAK,CACpB,MAAME,EAAIlC,EAAOE,YACjBa,EAAUK,aAAapB,EAAQiC,GAC/BjC,EAAQkC,IAQCH,EAAc,CACzB/B,EACAgC,EAAwB,QAExB,KAAOhC,IAAUgC,GAAK,CACpB,MAAME,EAAIlC,EAAOE,YACjBF,EAAOmC,SACPnC,EAAQkC"}