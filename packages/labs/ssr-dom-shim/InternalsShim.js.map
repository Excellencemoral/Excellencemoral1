{"version":3,"file":"InternalsShim.js","sourceRoot":"","sources":["src/InternalsShim.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nexport interface InternalsHost {\n  shadowRoot: ShadowRoot | null;\n  setAttribute(key: string, value: unknown): void;\n}\n\n/**\n * @TODO\n * - This can be typed better with keyof ARIAMixin, but TypeScript's definition\n * doesn't match what exists in the browsers\n */\nexport const ariaMixinEnum: Record<string, string> = {\n  ariaAtomic: 'aria-atomic',\n  ariaAutoComplete: 'aria-autocomplete',\n  ariaBraileLabel: 'aria-brailelabel',\n  ariaBraileDescription: 'aria-brailedescription',\n  ariaBusy: 'aria-busy',\n  ariaChecked: 'aria-checked',\n  ariaColCount: 'aria-colcount',\n  ariaColIndex: 'aria-colindex',\n  ariaColSpan: 'aria-colspan',\n  ariaCurrent: 'aria-current',\n  ariaDescription: 'aria-description',\n  ariaDisabled: 'aria-disabled',\n  ariaExpanded: 'aria-expanded',\n  ariaHasPopup: 'aria-haspopup',\n  ariaHidden: 'aria-hidden',\n  ariaInvalid: 'aria-invalid',\n  ariaKeyShortcuts: 'aria-keyshortcuts',\n  ariaLabel: 'aria-label',\n  ariaLevel: 'aria-level',\n  ariaLive: 'aria-live',\n  ariaModal: 'aria-modal',\n  ariaMultiLine: 'aria-multiline',\n  ariaMultiSelectable: 'aria-multiselectable',\n  ariaOrientation: 'aria-orientation',\n  ariaPlaceholder: 'aria-placeholder',\n  ariaPosInSet: 'aria-posinset',\n  ariaPressed: 'aria-pressed',\n  ariaReadOnly: 'aria-readonly',\n  ariaRequired: 'aria-required',\n  ariaRoleDescription: 'aria-roledescription',\n  ariaRowCount: 'aria-rowcount',\n  ariaRowIndex: 'aria-rowindex',\n  ariaRowSpan: 'aria-rowspan',\n  ariaSelected: 'aria-selected',\n  ariaSetSize: 'aria-setsize',\n  ariaSort: 'aria-sort',\n  ariaValueMax: 'aria-valuemax',\n  ariaValueMin: 'aria-valuemin',\n  ariaValueNow: 'aria-valuenow',\n  ariaValueText: 'aria-valuetext',\n  role: 'role'\n};\n\n/** Force the attributes onto the reference element based on internals properties */\nexport const initAom = (ref: InternalsHost, internals: ElementInternals) => {\n  for (const _key of Object.keys(ariaMixinEnum)) {\n    const key = _key as keyof ARIAMixin;\n    internals[key] = null;\n\n    let closureValue = '';\n    const attributeName = ariaMixinEnum[key];\n    Object.defineProperty(internals, key, {\n      get() {\n        return closureValue;\n      },\n      set(value) {\n        closureValue = value;\n        if (value) {\n          ref.setAttribute(attributeName, value);\n        }\n      }\n    });\n  }\n};\n\n// Shim the global element internals object\n// Methods should be fine as noops and properties can generally\n// be while on the server.\nexport const InternalsShim = class ElementInternals {\n  ariaAtomic = '';\n  ariaAutoComplete = '';\n  ariaBraileLabel = '';\n  ariaBraileDescription = '';\n  ariaBusy = '';\n  ariaChecked = '';\n  ariaColCount = '';\n  ariaColIndex = '';\n  ariaColSpan = '';\n  ariaCurrent = '';\n  ariaDescription = '';\n  ariaDisabled = '';\n  ariaExpanded = '';\n  ariaHasPopup = '';\n  ariaHidden = '';\n  ariaInvalid = '';\n  ariaKeyShortcuts = '';\n  ariaLabel = '';\n  ariaLevel = '';\n  ariaLive = '';\n  ariaModal = '';\n  ariaMultiLine = '';\n  ariaMultiSelectable = '';\n  ariaOrientation = '';\n  ariaPlaceholder = '';\n  ariaPosInSet = '';\n  ariaPressed = '';\n  ariaReadOnly = '';\n  ariaRequired = '';\n  ariaRoleDescription = '';\n  ariaRowCount = '';\n  ariaRowIndex = '';\n  ariaRowSpan = '';\n  ariaSelected = '';\n  ariaSetSize = '';\n  ariaSort = '';\n  ariaValueMax = '';\n  ariaValueMin = '';\n  ariaValueNow = '';\n  ariaValueText = '';\n  role = '';\n  _host: InternalsHost;\n  get shadowRoot() {\n    return this._host.shadowRoot;\n  }\n  constructor(_host: InternalsHost) {\n    this._host = _host;\n\n    initAom(_host, this);\n  }\n  checkValidity() {\n    return true;\n  }\n  form = null;\n  labels = [] as unknown as NodeListOf<HTMLLabelElement>;\n  reportValidity() {\n    return true;\n  }\n  setFormValue(): void {}\n  setValidity(): void {}\n  states = new Set();\n  validationMessage = '';\n  validity = {} as globalThis.ValidityState;\n  willValidate = true;\n};"]}