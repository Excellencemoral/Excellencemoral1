const i=new WeakMap;class t{constructor(t,s){this.startPaused=!1,this.disabled=!1,this.animates=new Set,this.pendingComplete=!1,this.host=t,this.animateOptions=s.animateOptions||{},this.startPaused=!!s.startPaused,this.disabled=!!s.disabled,this.onComplete=s.onComplete,i.set(this.host,this)}async add(i){var t,s;this.animates.add(i),this.startPaused&&(null===(t=i.animation)||void 0===t||t.pause()),this.pendingComplete=!0,await i.finished,this.pendingComplete&&!this.isAnimating&&(this.pendingComplete=!1,null===(s=this.onComplete)||void 0===s||s.call(this))}remove(i){this.animates.delete(i)}pause(){this.animates.forEach((i=>{var t;return null===(t=i.animation)||void 0===t?void 0:t.pause()}))}play(){this.animates.forEach((i=>{var t;return null===(t=i.animation)||void 0===t?void 0:t.play()}))}cancel(){this.animates.forEach((i=>{var t;return null===(t=i.animation)||void 0===t?void 0:t.cancel()})),this.animates.clear()}finish(){this.animates.forEach((i=>{var t;return null===(t=i.animation)||void 0===t?void 0:t.finish()})),this.animates.clear()}togglePlay(){this.isPlaying?this.pause():this.play()}get isAnimating(){return this.animates.size>0}get isPlaying(){return Array.from(this.animates).some((i=>{var t;return"running"===(null===(t=i.animation)||void 0===t?void 0:t.playState)}))}async finished(){await Promise.all(Array.from(this.animates).map((i=>i.finished)))}}export{t as AnimateController,i as animateControllers};
//# sourceMappingURL=animate-controller.js.map
